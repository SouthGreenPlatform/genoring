#!/bin/sh
# This script handle GenoRing management.
#
# Its default behavior is to setup what is missing, update the system if needed
# and start GenoRing (Drupal) CMS in daemon mode.
#
# It also handles special commands to interact with the CMS. Therefore, it
# allows the use of other replacement containers with their own CMS that would
# provide an adapted script with the same name and behavior, and accepting the
# same commands but working with the provided CMS.
#
# To keep it compatible with most shell system restrict to busybox commands
# (see https://www.commandlinux.com/man-page/man1/busybox.1.html).

cd /opt/drupal/

################################################################################
# Global functions.
################################################################################

# Wait for database to be ready to handle queries (3 minutes max or exit 1).
wait_database_ready()
{
  printf "Waiting for database server to be ready...\n"
  loop_count=0
  while ! pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" && [ "$loop_count" -lt 180 ]; do
    printf '.'
    loop_count=$(( loop_count + 1 ))
    sleep 1
  done
  if [ "$loop_count" -ge 180 ]; then
    >&2 printf "ERROR: Failed to wait for PostgreSQL database! Stopping here.\n"
    exit 1
  fi
  printf "...OK (ready).\n"
}

# Setup CMS database.
setup_database()
{
  # Get Drupal database name and user to use.
  DRUPAL_DB="${1:-$POSTGRES_DRUPAL_DB}"
  DRUPAL_DB_USER="${2:-$POSTGRES_USER}"

  printf "Setup database...\n"
  # Create a new PostgreSQL database.
  psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" --command="CREATE DATABASE $DRUPAL_DB WITH OWNER $DRUPAL_DB_USER;"
  # Install default extensions.
  psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" "$DRUPAL_DB" --command="CREATE EXTENSION pg_trgm; CREATE EXTENSION fuzzystrmatch;"
  printf "...OK (database created).\n"
}

# Install Drupal CMS (download and setup file system).
install_cms()
{
  printf "Drupal downloads...\n"
  printf "* Downloading Drupal $DRUPAL_VERSION core...\n"
  if [ ! -e ./composer.json ]; then
    # Prepare Drupal download settings.
    composer create-project --no-interaction --no-install -s dev guignonv/genoring_template . 1.0.x-dev
    if [ $? -gt 0 ]; then
      >&2 printf "WARNING: Failed to setup composer!\n"
    fi
  fi

  # Install Drupal files.
  composer install
  if [ $? -gt 0 ]; then
    printf "...ERROR!\n"
    >&2 printf "ERROR: Failed to download Drupal!\n"
    exit 1
  fi

  # Prepare file system.
  if [ -e ./web/sites ] && [ -e ./web/modules ] && [ -e ./web/themes ]; then
    mkdir -p private config
    sudo /opt/genoring/genoring_root.sh drupal_permission
    mkdir -p /data/genoring /data/upload
    chmod -R ugo+rw /data/genoring /data/upload
    ln -s /data/genoring private/genoring
    ln -s /data/upload private/upload
  else
    printf "  ...ERROR!\n"
    >&2 printf "ERROR: Installation process seems to have failed (expected web directories are missing)!\n"
    exit 1
  fi
  printf "  ...OK (core downloaded).\n"

  # Setup cron.
  # @todo check if cron runs for each site when using multiple sites.
  printf "* Setup Drupal cron...\n"
  printf "*/5 * * * * root cd /opt/drupal/web/ && /usr/bin/env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin COLUMNS=72 /usr/local/bin/php ../vendor/bin/drush --uri=$DRUPAL_HOST --quiet maint:status && /usr/local/bin/php ../vendor/bin/drush --uri=$DRUPAL_HOST --quiet cron >> /var/log/cron.log 2>&1\n" > /etc/cron.d/drush-cron
  printf "  ...OK (cron).\n"
  printf "...OK (Drupal downloaded).\n"
}

# Setup PHP.
setup_php()
{
  if [ ! -e ./php/php.ini ]; then
    printf "Setup PHP config...\n"
    mkdir -p ./php
    cp "$PHP_INI_DIR/php.ini-drupal" ./php/php.ini
    printf "...OK.\n"
  fi
}

# Setup Drupal CMS (initializes database content and setting files).
setup_cms()
{
  # Get Drupal database name and user to use.
  DRUPAL_DB="${1:-$POSTGRES_DRUPAL_DB}"

  printf "Setup Drupal...\n"
  if [ ! -s ./web/sites/default/settings.php ]; then
    printf "* settings.php...\n"
    cp ./web/sites/default/default.settings.php ./web/sites/default/settings.php
    # Append some settings.
    printf "\n\$settings['config_sync_directory'] = '../config/sync';\n\$settings['file_private_path'] = '/opt/drupal/private/';\n\n" >>./web/sites/default/settings.php
    printf "\n\$settings['trusted_host_patterns'] = [\n" >>./web/sites/default/settings.php
    # We must not use "printf" for $DRUPAL_TRUSTED_HOST because it complicates
    # escaping in env file, especially for "\E".
    echo "$DRUPAL_TRUSTED_HOST" >>./web/sites/default/settings.php
    printf "];\n\n" >>./web/sites/default/settings.php
    # Append auto-include for external databases settings in "db_settings.php".
    printf "\n\nif (file_exists(\$app_root . '/' . \$site_path . '/db_settings.php')) {\n  include \$app_root . '/' . \$site_path . '/db_settings.php';\n}\n\n" >>./web/sites/default/settings.php
    printf "  ...OK (settings.php).\n"
  fi
  # Allow setting update by Drupal installation process.
  # Permissions will be automatically reset after installation.
  chmod ugo+w ./web/sites/default/settings.php

  if [ ! -s ./web/sites/default/services.yml ]; then
    printf "* services.yml...\n"
    cp ./web/sites/default/default.services.yml ./web/sites/default/services.yml
    # Enable and configure Drupal CORS to allow REST and token authentication...
    # - enabled: true
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:    [^\n]+\n|\s*\n|\s*#[^\n]*\n)*)    enabled:\s*false/$1    enabled: true/smig' ./web/sites/default/services.yml
    # - allowedHeaders: ['authorization','content-type','accept','origin','access-control-allow-origin','x-allowed-header']
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:\s*\n|    [^\n]+\n|    #[^\n]*\n)*)    allowedHeaders:[^\n]*/$1    allowedHeaders: ['"'"'authorization'"'"','"'"'content-type'"'"','"'"'accept'"'"','"'"'origin'"'"','"'"'access-control-allow-origin'"'"','"'"'x-allowed-header'"'"']/smig' ./web/sites/default/services.yml
    # - allowedMethods: ['*']
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:    [^\n]+\n|\s*\n|\s*#[^\n]*\n)*)    allowedMethods:[^\n]*/$1    allowedMethods: ['"'"'*'"'"']/smig' ./web/sites/default/services.yml
    printf "  ...OK (services.yml).\n"
  fi

  if [ ! -e ./web/sites/default/db_settings.php ]; then
    printf "* db_settings.php...\n"
    cp /opt/genoring/db_settings.template.php ./web/sites/default/db_settings.php
    printf "  ...OK (db_settings.php).\n"
  fi

  # Install Drupal.
  printf "* Initializing Drupal...\n"
  drush -y site:install genoring_distrib \
    --db-url="pgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DRUPAL_DB" \
    --account-mail="$DRUPAL_USER_MAIL" \
    --account-name="$DRUPAL_USER" \
    --account-pass="$DRUPAL_PASSWORD" \
    --site-mail="$DRUPAL_SITE_MAIL" \
    --site-name="$DRUPAL_SITE_NAME"
  if [ $? -gt 0 ]; then
    printf "  ...ERROR!\n"
    >&2 printf "ERROR: Failed to initialize Drupal!\npgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DRUPAL_DB\n"
    exit 1
  fi
  printf "  ...OK (Drupal initialized).\n"

  # File system permissions.
  printf "* Adjust file system permissions...\n"
  chmod -R ugo+rw /opt/drupal/private /opt/drupal/config /opt/drupal/web/sites/default/files
  sudo /opt/genoring/genoring_root.sh www_permissions
  # Allow back user to write in default and settings.php as the proxy is not
  # running with the same user and will not have wrtie access to those.
  chmod u+w ./web/sites/default ./web/sites/default/settings.php
  printf "  ...OK (file system).\n"

  # Externalize database credentials.
  printf "* Separate database credentials from global settings...\n"
  perl -n -e 'BEGIN{undef $/;} print $1 if m/^(\$databases\[\x27default\x27\]\[\x27default\x27\]\s+=.*?\n\s*\); *\n?)/smig' ./web/sites/default/settings.php >> ./web/sites/default/db_settings.php
  perl -pi -e 'BEGIN{undef $/;} s/^(\$databases\[\x27default\x27\]\[\x27default\x27\]\s+=.*?\n\s*\); *\n?)//smig' ./web/sites/default/settings.php
  printf "  ...OK (database credentials).\n"

  printf "...OK (Drupal setup).\n"
}

# Update CMS and modules.
update_cms()
{
  printf "Updating Drupal...\n"
  # Check if updates could run well.
  # @todo Maybe check free disk space as well?
  if composer update --with-all-dependencies --dry-run; then
    # Set Drupal offline.
    drush state:set system.maintenance_mode 1 --input-format=integer
    # Backup DB.
    printf "* Backup Drupal...\n"
    drush -y archive:dump --destination=/backups/preupdate_backup.tgz --overwrite
    if [ $? -ne 0 ]; then
      printf "  ...FAILED to backup, aborting update.\n"
      printf "...ERROR!\n"
      >&2 printf "ERROR: Unable to create a backup before updating!\n"
      exit 1
    fi
    printf "  ...OK (backup).\n"
    if composer update --with-all-dependencies && drush -y updb; then
      printf "...OK (update).\n"
    else
      # Restore DB backup.
      printf "...ERROR!\n"
      >&2 printf "ERROR: Drupal update failed! Restoring backup...\n"
      drush -y archive:restore /backups/preupdate_backup.tgz
      rm -rf ./vendor
      composer install
      printf "...OK (restoring).\n"
    fi
    # Set Drupal back online.
    drush state:set system.maintenance_mode 0 --input-format=integer
  fi
}

# Start GenoRing in daemon mode.
start_genoring()
{
  printf "[Start GenoRing]\n"
  # Check if Drupal should be installed.
  if [ ! -e ./web/index.php ]; then
    install_cms
  else
    printf "* Drupal already downloaded.\n"
  fi

  # Check PHP settings.
  setup_php

  # Wait for database ready.
  wait_database_ready

  # @todo Manage multiple instances.
  # Check if the database is already initialized.
  test_drupal_db=$( psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -XtAc "SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DRUPAL_DB';" )
  test_drupal_db_error=$?
  if [ '1' = "$test_drupal_db" ]; then
    # Database already initialized.
    printf "* Database already initialized.\n"
  else
    if [ "$test_drupal_db_error" -ne 0 ]; then
      >&2 printf "ERROR: Failed to connect to PostgreSQL database! Stopping here.\n"
      exit 1
    fi
    setup_database
    setup_cms
  fi

  # Update Drupal and modules.
  if [ "$DRUPAL_UPDATE" -gt 0 ]; then
    update_cms
    if [ $DRUPAL_UPDATE -eq 2 ]; then
      # Update and stop.
      exit 0
    fi
  fi

  printf "* Start cron daemon...\n"
  sudo /opt/genoring/genoring_root.sh start_cron
  printf "  ...OK.\n"
  
  printf "* Init sendmail...\n"
  sudo /opt/genoring/genoring_root.sh start_sendmail
  printf "  ...OK.\n"

  # Make sure we removed offline file if not in offline mode.
  if [ -z $COMPOSE_PROFILES ] || [ $COMPOSE_PROFILES != 'offline' ]; then
    if [ -e ./web/offline.html ]; then
      rm -f ./web/offline.html
    fi
  fi

  printf "* Running PHP-fpm daemon...\n"
  # Launch PHP-fpm in foreground. We use exec to use the keep the script process
  # ID (PID 1) to be able to receive signals such as SIGTERM or SIGKILL.
  # Ortherwise, the container will be killed by Docker instead of stopping
  # gracefully.
  exec php-fpm -F
  # We should not get there.
  printf "[Stopped]\n"
}

# Manage GenoRing commands.
#######################################

install_module()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: install_module(): Missing module name!"
    exit 1
  fi
  composer require --no-interaction "drupal/$1"
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to install module '$1'!\n"
    exit 1
  fi
  drush pm:enable -y $1
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to enable module '$1'!\n"
    exit 1
  fi
}

uninstall_module()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: uninstall_module(): Missing module name!"
    exit 1
  fi
  drush pm:uninstall -y $1
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to uninstall module '$1'!\n"
    exit 1
  fi
  composer remove --no-interaction "drupal/$1"
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove module '$1'!\n"
    exit 1
  fi
}

add_menuitem()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_menuitem(): Missing YAML file!"
    exit 1
  fi

  # Add menu item if not exist.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_menuitem $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add menu item using YAML file '$1'!\n"
    exit 1
  fi
}

remove_menuitem()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_menuitem(): Missing YAML file!"
    exit 1
  fi

  # Remove menu items.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_menuitem $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove menu item using YAML file '$1'!\n"
    exit 1
  fi
}

add_page()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_page(): Missing YAML file!"
    exit 1
  fi

  # Add page.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_page $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add page using YAML file '$1'!\n"
    exit 1
  fi
}

remove_page()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_page(): Missing YAML file!"
    exit 1
  fi

  # Remove menu items.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_page $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove page using YAML file '$1'!\n"
    exit 1
  fi
}

add_integration()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_integration(): Missing YAML file!"
    exit 1
  fi

  # Add integration.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_integration $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add integration using YAML file '$1'!\n"
    exit 1
  fi
}

remove_integration()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_integration(): Missing YAML file!"
    exit 1
  fi

  # Remove integration.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_integration $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove integration using YAML file '$1'!\n"
    exit 1
  fi
}

add_user()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_user(): Missing YAML file!"
    exit 1
  fi

  # Add user.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_user $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add user using YAML file '$1'!\n"
    exit 1
  fi
}

remove_user()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_user(): Missing YAML file!"
    exit 1
  fi

  # Remove user.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_user $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove user using YAML file '$1'!\n"
    exit 1
  fi
}

add_group()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_group(): Missing YAML file!"
    exit 1
  fi

  # Add group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_group $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add group using YAML file '$1'!\n"
    exit 1
  fi
}

remove_group()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_group(): Missing YAML file!"
    exit 1
  fi

  # Remove group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_group $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove group using YAML file '$1'!\n"
    exit 1
  fi
}

add_user_to_group()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_user_to_group(): Missing YAML file!"
    exit 1
  fi

  # Add user to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_user_to_group $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add user to group using YAML file '$1'!\n"
    exit 1
  fi
}

remove_user_from_group()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: remove_user_from_group(): Missing YAML file!"
    exit 1
  fi

  # Add user to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_user_from_group $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to remove user from group using YAML file '$1'!\n"
    exit 1
  fi
}

add_permission()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_permission(): Missing YAML file!"
    exit 1
  fi

  # Add permission to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_permission $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add permission using YAML file '$1'!\n"
    exit 1
  fi
}

remove_permission()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: add_permission(): Missing YAML file!"
    exit 1
  fi

  # Add permission to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_permission $1

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to add permission using YAML file '$1'!\n"
    exit 1
  fi
}

backup()
{
  backup_name="${1:-$(date +"drupal_backup_%Y%m%d_%H%M%S")}"
  mkdir -p /backups/$backup_name/genoring/
  drush -y archive:dump --destination=/backups/$backup_name/genoring/ --overwrite --exclude-code-paths=web/sites/default/db_settings.php
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to perform site backup!\n"
    exit 1
  fi
}

restore()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: restore(): Missing backup name!"
    exit 1
  fi

  # First we extract backuped source code of Drupal in a different directory to
  # avoid removing libraries used by Drush for this opeation.
  drush -y archive:restore --code --overwrite --destination-path /tmp/drupal_res /backups/$1/genoring/archive.tar.gz
  # Then we copy restored files to current Drupal and remove restore temp dir.
  cp -R /tmp/drupal_res/* /opt/drupal
  rm -rf /tmp/drupal_res
  # We update the composer libraries.
  composer update
  # Now we restore the rest (database and files).
  drush -y archive:restore  --db --files --overwrite /backups/$1/genoring/archive.tar.gz

  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to restore site backup!\n"
    exit 1
  fi
}

offline()
{
  drush -y state:set system.maintenance_mode 1 --input-format=integer
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to set site offline!\n"
    exit 1
  fi
}

online()
{
  drush -y state:set system.maintenance_mode 0 --input-format=integer
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to set site online!\n"
    exit 1
  fi
}

command()
{
  if [ -z "$1" ]; then
    >&2 printf "ERROR: command(): Missing command name!"
    exit 1
  fi

  "$@"
  if [ $? -gt 0 ]; then
    >&2 printf "ERROR: Failed to run command '$1'!\n"
    exit 1
  fi
}

#######################################

# Display script help.
print_help()
{
  printf "GenoRing platform v1.0 (using Drupal CMS)
Syntax:
  ./genoring start

Available commands:
  help:
    Displays this help.
  start:
    Starts GenoRing and the PHP FPM daemon (never returns unless killed).
  install_module <module>:
    Downloads and installs the given Drupal module.
  uninstall_module <module>:
    Uninstalls and removes the given Drupal module.
  add_menuitem <uri> <label> [menu_machine_name]:
    Add the given URI to the Drupal menu 'menu_machine_name' using the label
    'label'. If the URI is already in use, the menu item is not added.
  remove_menuitem <uri>:
    Removes all the menu items with the given URI.
  add_user <user_name> <email> [password]:
    Adds the user with the given 'user_name', 'email' and 'password' to Drupal.
  remove_user <user_name>:
    Removes the user that uses the name 'user_name' from Drupal (reassign
    content to 'anonymous').
  add_group <group_name>:
    Adds the role 'group_name' to Drupal.
  remove_group <group_name>:
    Removes the role 'group_name' from Drupal.
  add_user_to_group <user_name> <group_name>:
    Gives the given role to the given user.
  remove_user_from_group <user_name> <group_name>:
    Removes the given role from the given user.
  add_permission <permission_name> <group_name>:
    Grants the given permission to the given group.
  remove_permission <permission_name> <group_name>:
    Removes the given permission from the given group.
  backup [backup_name]:
    Generates a Drupal site archive using the given name.
    Default name is 'drupal_backup_YYYYMMDD_HHIISS' where YYYY is the year, MM
    the month, DD the day of the month, HH current hour (24H format), II current
    minute and SS current second.
  restore <backup_name>:
    Restores a Drupal site archive from the given backup name.
  command <command> [arguments...]:
    Runs a shell command. Using 'genoring command ...' rather than the shell
    command directly allows genoring core replacement to handle and replaces
    some specific commands such as drush commands or composer commands.
  update:
    Performs Drupal CMS and extensions updates. Handles site backup and restore
    in case of update failure.
  offline:
    Sets the site offline and displays a maintenance message.
  online:
    Sets the site back online.
\n"
}

################################################################################
# Main script execution.
################################################################################

# PostgeSQL access setup.
printf "$POSTGRES_HOST:$POSTGRES_PORT:*:$POSTGRES_USER:$POSTGRES_PASSWORD\n" >~/.pgpass && chmod go-rwx ~/.pgpass

# Process commands.
cmd="$1"
shift
case "$cmd" in
  start)
    start_genoring "$@"
    ;;
  help|-help|--help|-?|/?)
    print_help "$@"
    ;;
  install_module)
    install_module "$@"
    ;;
  uninstall_module)
    uninstall_module "$@"
    ;;
  add_menuitem)
    add_menuitem "$@"
    ;;
  remove_menuitem)
    remove_menuitem "$@"
    ;;
  add_page)
    add_page "$@"
    ;;
  remove_page)
    remove_page "$@"
    ;;
  add_integration)
    add_integration "$@"
    ;;
  remove_integration)
    remove_integration "$@"
    ;;
  add_user)
    add_user "$@"
    ;;
  remove_user)
    remove_user "$@"
    ;;
  add_group)
    add_group "$@"
    ;;
  remove_group)
    remove_group "$@"
    ;;
  add_user_to_group)
    add_user_to_group "$@"
    ;;
  remove_user_from_group)
    remove_user_from_group "$@"
    ;;
  add_permission)
    add_permission "$@"
    ;;
  remove_permission)
    remove_permission "$@"
    ;;
  backup)
    backup "$@"
    ;;
  restore)
    restore "$@"
    ;;
  update)
    update_cms "$@"
    ;;
  offline)
    offline "$@"
    ;;
  online)
    online "$@"
    ;;
  command)
    command "$@"
    ;;
  *)
    if [ ! -z "$1" ]; then
      >&2 printf "ERROR: Syntax error! Unsupported command '$cmd $@'.\n\n"
      print_help
      exit 1
    else
      print_help
    fi
    ;;
esac
