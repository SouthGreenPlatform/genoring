#!/bin/sh
# This script handle GenoRing management.
#
# Its default behavior is to setup what is missing, update the system if needed
# and start GenoRing (Drupal) CMS in daemon mode.
#
# It also handles special commands to interact with the CMS. Therefore, it
# allows the use of other replacement containers with their own CMS that would
# provide an adapted script with the same name and behavior, and accepting the
# same commands but working with the provided CMS.
#
# To keep it compatible with most shell system restrict to busybox commands
# (see https://www.commandlinux.com/man-page/man1/busybox.1.html).

disable_healthcheck="/tmp/disable-healthcheck"
genoring_template="drupal/recommended-project"
genoring_template_version=""
setup_dir="_temp_composer_setup"
setup_log="/opt/drupal/genoring_setup.log"
[ -f "$setup_log" ] && setup_log="/dev/null"
stability="dev"

rm -f "$disable_healthcheck"
cd /opt/drupal/

################################################################################
# Global functions.
################################################################################

cleanup()
{
  # If we got the temporary setup directory, it means an installation was
  # started but failed. We need to clean things up and remove index.php file to
  # have the system retry to install everything.
  if [ -d "$setup_dir" ]; then
    rm -rf "$setup_dir" /opt/drupal/web/index.php 2>/dev/null
  fi
  rm -f "$disable_healthcheck"
  printf "\nStopped: cleanup.\n" >>"$setup_log"
}
trap cleanup EXIT INT TERM

# Log messages.
log() {
  printf "%s\n" "$@" | tee -a "$setup_log"
}

# Log errors.
log_error() {
  printf "%s\n" "$@" | tee -a "$setup_log" >&2
}

# Wait for database to be ready to handle queries (3 minutes max or exit 1).
wait_database_ready()
{
  log "Waiting for database server to be ready..."
  loop_count=0
  while ! pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" && [ "$loop_count" -lt 180 ]; do
    printf "." | tee -a "$setup_log" >&2
    loop_count=$(( loop_count + 1 ))
    sleep 1
  done
  printf "\n" | tee -a "$setup_log" >&2
  if [ "$loop_count" -ge 180 ]; then
    log_error "ERROR: Failed to wait for PostgreSQL database! Stopping here."
    exit 1
  fi
  log "...OK (ready)."
}

# Setup CMS database.
setup_database()
{
  # Get Drupal database name and user to use.
  DRUPAL_DB="${1:-$POSTGRES_DRUPAL_DB}"
  DRUPAL_DB_USER="${2:-$POSTGRES_USER}"

  log "Setup database..."
  # Create a new PostgreSQL database.
  psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" --command="CREATE DATABASE $DRUPAL_DB WITH OWNER $DRUPAL_DB_USER;" 2>&1 | tee -a "$setup_log"
  # Install default extensions.
  psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" "$DRUPAL_DB" --command="CREATE EXTENSION pg_trgm;" 2>&1 | tee -a "$setup_log"
  log "...OK (database created)."
}

# Install Drupal CMS (download and setup file system).
install_cms()
{
  log "Drupal downloads..."
  touch "$disable_healthcheck"
  log "* Initializing Drupal directory..."
  if [ ! -e /opt/drupal/composer.json ]; then
    printf "PWD: " >>"$setup_log"
    pwd >>"$setup_log"
    printf "\n--------------------------------------------------------------------------------\nDrupal directory:\n-----------------\n" >>"$setup_log"
    ls -la . >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\nDisk space:\n-----------\n" >>"$setup_log"
    df -h >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n" >>"$setup_log"
    # We use a dedicated setup directory to avoid artifacts that may be already
    # present in current directory (ie. on Mac systems, the "web" directory is
    # often pre-created), preventing composer from creating the project.
    rm -rf "$setup_dir" 2>/dev/null
    mkdir -p "$setup_dir"
    # Create temporary setup directory and prepare Drupal download settings.
    printf "\nGenoring template: $genoring_template $genoring_template_version\n" >>"$setup_log"
    # For Composer debugging:
    # printf "DEBUG\n"; while :; do sleep 60; done
    if (cd "$setup_dir" && composer create-project --no-interaction --no-install -s $stability $genoring_template . $genoring_template_version 2>&1 | tee -a "$setup_log"); then
      if [ -d "/opt/drupal/web" ] && [ "$(stat -c %u /opt/drupal/web)" != "$(id -u)" ]; then
        printf "WARNING: /opt/drupal/web exists. Trying to change owner.\n" >>"$setup_log"
        sudo /opt/genoring/genoring_root.sh base_permissions >>"$setup_log" 2>&1
      fi
      # Move silently project files to the expected Drupal project directory.
      rsync -a --exclude="$setup_dir" "$setup_dir/" /opt/drupal/ >>"$setup_log" 2>&1
      rm -rf "$setup_dir"
      log "rsync done."
      printf -- "--------------------------------------------------------------------------------\nDrupal directory (post-composer):\n---------------------------------\n" >>"$setup_log"
      ls -la . >>"$setup_log"
      printf -- "--------------------------------------------------------------------------------\n" >>"$setup_log"
      log "* Add drush..."
      composer require --no-interaction --no-install "drush/drush" 2>&1 | tee -a "$setup_log"
      log "* Add GenoRing recipe..."
      composer require --no-interaction --no-install "drupal/genoring_recipe:^1.0.x-dev" 2>&1 | tee -a "$setup_log"
    else
      log_error "WARNING: Failed to setup composer!"
      rm -rf "$setup_dir" 2>/dev/null
      exit 1
    fi
  fi

  # Check if a specific Drupal version was provided.
  if [ ! -z $DRUPAL_VERSION ]; then
    log "* Selecting Drupal $DRUPAL_VERSION core..."
    composer require --no-interaction --no-install "drupal/core-composer-scaffold:^$DRUPAL_VERSION" "drupal/core-project-message:^$DRUPAL_VERSION" "drupal/core-recommended:^$DRUPAL_VERSION"  2>&1 | tee -a "$setup_log"
  fi

  # Install Drupal files.
  log "* Downloading Drupal..."
  printf -- "--------------------------------------------------------------------------------\ncomposer.json:\n--------------\n" >>"$setup_log"
  cat composer.json >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\nInstall:\n--------\n" >>"$setup_log"
  output=$(composer install --no-interaction --ignore-platform-reqs 2>&1)
  pipestatus=$?
  printf $output | tee -a "$setup_log"
  if [ $pipestatus -gt 0 ]; then
    log "...ERROR!"
    log_error "ERROR: Failed to download Drupal!"
    exit 1
  fi
  log "  ...OK (core downloaded)."

  # Prepare file system.
  if [ -e /opt/drupal/web/sites ] && [ -e /opt/drupal/web/modules ] && [ -e /opt/drupal/web/themes ]; then
    log "* Prepare file system..."
    mkdir -p /opt/drupal/config/sync /opt/drupal/web/sites/default/files /data/genoring /data/upload
    ln -s /data  /opt/drupal/private
    sudo /opt/genoring/genoring_root.sh drupal_permissions
    printf "\n--------------------------------------------------------------------------------\nDrupal directory (post-FS):\n---------------------------\n" >>"$setup_log"
    ls -la . >>"$setup_log"
    printf "\nData directory:\n---------------\n" >>"$setup_log"
    ls -la /data/ >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n" >>"$setup_log"
    log "  ...OK (file system prepared)."
  else
    log "  ...ERROR!"
    log_error "ERROR: Installation process seems to have failed (expected web directories are missing)!"
    exit 1
  fi

  log "...OK (Drupal downloaded)."

  # Add missing version info for dev modules.
  for INFO_FILE in $(find /opt/drupal/web -path "*/contrib/*.info.yml"); do
    if ! grep -q "^version:" "$INFO_FILE"; then
      printf "\nversion: '100.0.0-dev'\n" >> "$INFO_FILE"
    fi
  done
}

# Setup PHP.
setup_php()
{
  if [ ! -e /opt/drupal/php/php.ini ]; then
    log "Setup PHP config..."
    mkdir -p /opt/drupal/php/drush
    cp "$PHP_INI_DIR/php.ini-drupal" /opt/drupal/php/php.ini
    printf "memory_limit=2048M\nmax_execution_time=900\n" > /opt/drupal/php/drush/drush.ini
    # Log php.ini.
    printf -- "--------------------------------------------------------------------------------\nphp.ini:\n--------\n" >>"$setup_log"
    cat /opt/drupal/php/php.ini >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
    log "...OK."
  fi
}

# Setup Drupal CMS (initializes database content and setting files).
setup_cms()
{
  # Get Drupal database name and user to use.
  DRUPAL_DB="${1:-$POSTGRES_DRUPAL_DB}"

  log "Setup Drupal..."
  if [ ! -s /opt/drupal/web/sites/default/settings.php ]; then
    log "* settings.php..."
    cp /opt/drupal/web/sites/default/default.settings.php /opt/drupal/web/sites/default/settings.php
    # Append some settings.
    printf "\n\$settings['config_sync_directory'] = '../config/sync';\n\$settings['file_private_path'] = '/opt/drupal/private/';\n\n" >>/opt/drupal/web/sites/default/settings.php
    printf "\n\$settings['trusted_host_patterns'] = [\n" >>/opt/drupal/web/sites/default/settings.php
    # We must not use "printf" for $DRUPAL_TRUSTED_HOST because it complicates
    # escaping in env file, especially for "\E".
    echo "$DRUPAL_TRUSTED_HOST" >>/opt/drupal/web/sites/default/settings.php
    printf "];\n\n" >>/opt/drupal/web/sites/default/settings.php
    # Append auto-include for external databases settings in "db_settings.php".
    printf "\nif (file_exists(\$app_root . '/' . \$site_path . '/db_settings.php')) {\n  include \$app_root . '/' . \$site_path . '/db_settings.php';\n}\n\n" >>/opt/drupal/web/sites/default/settings.php
    # Log settings.
    printf -- "--------------------------------------------------------------------------------\nsettings.php:\n-------------\n" >>"$setup_log"
    cat /opt/drupal/web/sites/default/settings.php >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
    log "  ...OK (settings.php)."
  fi

  if [ ! -s /opt/drupal/web/sites/default/services.yml ]; then
    log "* services.yml..."
    cp /opt/drupal/web/sites/default/default.services.yml /opt/drupal/web/sites/default/services.yml
    # Enable and configure Drupal CORS to allow REST and token authentication...
    # - enabled: true
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:    [^\n]+\n|\s*\n|\s*#[^\n]*\n)*)    enabled:\s*false/$1    enabled: true/smig' /opt/drupal/web/sites/default/services.yml
    # - allowedHeaders: ['authorization','content-type','accept','origin','access-control-allow-origin','x-allowed-header']
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:\s*\n|    [^\n]+\n|    #[^\n]*\n)*)    allowedHeaders:[^\n]*/$1    allowedHeaders: ['"'"'authorization'"'"','"'"'content-type'"'"','"'"'accept'"'"','"'"'origin'"'"','"'"'access-control-allow-origin'"'"','"'"'x-allowed-header'"'"']/smig' /opt/drupal/web/sites/default/services.yml
    # - allowedMethods: ['*']
    perl -pi -e 'BEGIN{undef $/;} s/^(  cors.config:\s*\n(?:    [^\n]+\n|\s*\n|\s*#[^\n]*\n)*)    allowedMethods:[^\n]*/$1    allowedMethods: ['"'"'*'"'"']/smig' /opt/drupal/web/sites/default/services.yml
    # Log services.
    printf -- "--------------------------------------------------------------------------------\nservices.yml:\n-------------\n" >>"$setup_log"
    cat /opt/drupal/web/sites/default/services.yml >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
    log "  ...OK (services.yml)."
  fi

  if [ ! -e /opt/drupal/web/sites/default/db_settings.php ]; then
    log "* db_settings.php..."
    cp /opt/genoring/db_settings.template.php /opt/drupal/web/sites/default/db_settings.php
    # Log DB settings.
    printf -- "--------------------------------------------------------------------------------\ndb_settings.php:\n----------------\n" >>"$setup_log"
    cat /opt/drupal/web/sites/default/db_settings.php >>"$setup_log"
    printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
    log "  ...OK (db_settings.php)."
  fi

  # Install Drupal.
  log "* Initializing Drupal..."
  # Allow setting update by Drupal installation process.
  # Permissions will be automatically reset after installation.
  chmod uog+w /opt/drupal/web/sites/default/settings.php /opt/drupal/web/sites/default/db_settings.php
  printf -- "--------------------------------------------------------------------------------\nDefault site directory:\n-----------------------\n" >>"$setup_log"
  ls -la /opt/drupal/web/sites/default >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
  printf "Drush command: drush -y site:install recipes/genoring_recipe --db-url=\"pgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DRUPAL_DB\" --account-mail=\"$DRUPAL_USER_MAIL\" --account-name=\"$DRUPAL_USER\" --account-pass=\"$DRUPAL_PASSWORD\" --site-mail=\"$DRUPAL_SITE_MAIL\" --site-name=\"$DRUPAL_SITE_NAME\"\n\n" >>"$setup_log"
  # For Drupal install debugging:
  # printf "DEBUG\n"; while :; do sleep 60; done
  output=$(
    drush -y site:install recipes/genoring_recipe \
      --db-url="pgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DRUPAL_DB" \
      --account-mail="$DRUPAL_USER_MAIL" \
      --account-name="$DRUPAL_USER" \
      --account-pass="$DRUPAL_PASSWORD" \
      --site-mail="$DRUPAL_SITE_MAIL" \
      --site-name="$DRUPAL_SITE_NAME" 2>&1
  )
  pipestatus=$?
  printf $output | tee -a "$setup_log"
  if [ $pipestatus -gt 0 ]; then
    log "  ...ERROR!"
    log_error "ERROR: Failed to initialize Drupal!\npgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$DRUPAL_DB"
    exit 1
  fi
  log "  ...OK (Drupal initialized)."

  # File system permissions.
  log "* Adjust file system permissions..."
  chmod -R ugo+rw /opt/drupal/private /opt/drupal/config /opt/drupal/web/sites/default/files
  sudo /opt/genoring/genoring_root.sh www_permissions
  # Allow back user to write in default and settings.php as the proxy is not
  # running with the same user and will not have write access to those.
  chmod og-w,u+w /opt/drupal/web/sites/default /opt/drupal/web/sites/default/settings.php /opt/drupal/web/sites/default/db_settings.php
  log "  ...OK (file system)."

  # Externalize database credentials.
  log "* Separate database credentials from global settings..."
  printf -- "--------------------------------------------------------------------------------\nCurrent settings.php:\n---------------------\n" >>"$setup_log"
  cat /opt/drupal/web/sites/default/settings.php >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
  # Log $database settings detection.
  printf "DB settings capture:\n--------------------\n" >>"$setup_log"
  perl -n -e 'BEGIN{undef $/;} print $1 if m/^(\$databases\[\x27default\x27\]\[\x27default\x27\]\s+=.*?\n\s*\); *\n?)/smig' /opt/drupal/web/sites/default/settings.php >>"$setup_log"
  printf "\n--------------------------------------------------------------------------------\n" >>"$setup_log"
  # Proceed.
  perl -n -e 'BEGIN{undef $/;} print $1 if m/^(\$databases\[\x27default\x27\]\[\x27default\x27\]\s+=.*?\n\s*\); *\n?)/smig' /opt/drupal/web/sites/default/settings.php >> /opt/drupal/web/sites/default/db_settings.php
  perl -pi -e 'BEGIN{undef $/;} s/^(\$databases\[\x27default\x27\]\[\x27default\x27\]\s+=.*?\n\s*\); *\n?)//smig' /opt/drupal/web/sites/default/settings.php
  printf "Updated settings.php:\n---------------------\n" >>"$setup_log"
  cat /opt/drupal/web/sites/default/settings.php >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\n\nUpdated db_settings.php:\n------------------------\n" >>"$setup_log"
  cat /opt/drupal/web/sites/default/db_settings.php >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"
  log "  ...OK (database credentials)."

  # Log FS.
  printf -- "--------------------------------------------------------------------------------\nDefault site directory (post-config):\n-------------------------------------\n" >>"$setup_log"
  ls -la /opt/drupal/web/sites/default >>"$setup_log"
  printf -- "--------------------------------------------------------------------------------\n\n" >>"$setup_log"

  log "...OK (Drupal setup)."
}

# Update CMS and modules.
update_cms()
{
  log "Updating Drupal..."
  # Check if updates could run well.
  # @todo Maybe check free disk space as well?
  if composer update --with-all-dependencies --dry-run; then
    # Set Drupal offline.
    drush state:set system.maintenance_mode 1 --input-format=integer
    # Backup DB.
    log "* Backup Drupal..."
    drush -y archive:dump --destination=/backups/preupdate_backup.tar.gz --overwrite
    if [ $? -ne 0 ]; then
      log "  ...FAILED to backup, aborting update."
      log "...ERROR!"
      log_error "ERROR: Unable to create a backup before updating!"
      exit 1
    fi
    log "  ...OK (backup)."
    touch "$disable_healthcheck"
    if composer update --with-all-dependencies && drush -y updb; then
      rm -f "$disable_healthcheck"
      log "...OK (update)."
    else
      # Restore DB backup.
      log "...ERROR!"
      log_error "ERROR: Drupal update failed! Restoring backup..."
      drush -y archive:restore /backups/preupdate_backup.tar.gz
      rm -rf /opt/drupal/vendor
      composer install
      rm -f "$disable_healthcheck"
      log "...OK (restoring)."
    fi
    # Set Drupal back online.
    drush state:set system.maintenance_mode 0 --input-format=integer
  fi
}

# Start GenoRing in daemon mode.
start_genoring()
{
  log "[Start GenoRing]"
  # Disable health check in case we install everything.
  touch "$disable_healthcheck"
  # Check if Drupal should be installed.
  if [ ! -e /opt/drupal/web/index.php ]; then
    install_cms
  else
    log "* Drupal already downloaded."
  fi

  # Check PHP settings.
  setup_php

  # Wait for database ready.
  wait_database_ready

  # @todo Manage multiple instances.
  # Check if the database is already initialized.
  test_drupal_db=$( psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -XtAc "SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DRUPAL_DB';" )
  test_drupal_db_error=$?
  if [ '1' = "$test_drupal_db" ]; then
    # Database already initialized.
    log "* Database already initialized."
  else
    if [ "$test_drupal_db_error" -ne 0 ]; then
      log_error "ERROR: Failed to connect to PostgreSQL database! Stopping here."
      exit 1
    fi
    setup_database
    setup_cms
  fi
  # Here, everything should be fine: re-enable health check.
  rm -f "$disable_healthcheck"

  # Update Drupal and modules.
  if [ "$DRUPAL_UPDATE" -gt 0 ]; then
    update_cms
    if [ $DRUPAL_UPDATE -eq 2 ]; then
      # Update and stop.
      exit 0
    fi
  fi

  log "* Start cron daemon..."
  sudo /opt/genoring/genoring_root.sh start_cron
  log "  ...OK."

  log "* Init sendmail..."
  sudo /opt/genoring/genoring_root.sh start_sendmail
  log "  ...OK."

  # Make sure we removed offline file if not in offline mode.
  if [ -z $COMPOSE_PROFILES ] || [ $COMPOSE_PROFILES != 'offline' ]; then
    if [ -e /opt/drupal/web/offline.html ]; then
      rm -f /opt/drupal/web/offline.html
    fi
  fi

  log "* Running PHP-fpm daemon..."
  # Launch PHP-fpm in foreground. We use exec to use the keep the script process
  # ID (PID 1) to be able to receive signals such as SIGTERM or SIGKILL.
  # Ortherwise, the container will be killed by Docker instead of stopping
  # gracefully.
  exec php-fpm -F
  # We should not get there.
  log "[Stopped]"
}

# Initializes Drupal environment to be able to run tests.
inittest()
{
  mkdir -p /opt/drupal/web/sites/simpletest/browser_output
  chmod -R uog+rwX /opt/drupal/web/sites/simpletest /opt/drupal/web/sites/simpletest/browser_output
  if [ "$(id -u)" -eq 0 ]; then
    su genoring -c "composer require drupal/core-dev --dev --update-with-all-dependencies  --no-interaction"
    chown -R genoring:genoring  /opt/drupal/web/sites/simpletest/browser_output
  else
    composer require drupal/core-dev --dev --update-with-all-dependencies --no-interaction
  fi
  PHPUNIT_FILE="web/core/phpunit.xml"
  if [ ! -f "$PHPUNIT_FILE" ]; then
    cp web/core/phpunit.xml.dist "$PHPUNIT_FILE"
    chown genoring:genoring web/core/phpunit.xml
    ENCODED_PASSWORD=$(printf "$POSTGRES_PASSWORD" | perl -ne 's/([^a-z\d\Q.-_~ \E])/sprintf("&#%d;", ord($1))/geix; print;')
    perl -pi -e 's|<env name="SIMPLETEST_BASE_URL".*?>|<env name="SIMPLETEST_BASE_URL" value="http://genoring-proxy"/>|' "$PHPUNIT_FILE"
    perl -pi -e "s|<env name=\"SIMPLETEST_DB\".*?>|<env name=\"SIMPLETEST_DB\" value=\"pgsql://$POSTGRES_USER:$ENCODED_PASSWORD\@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DRUPAL_DB\"/>|" "$PHPUNIT_FILE"
    perl -pi -e 's|<env name="BROWSERTEST_OUTPUT_DIRECTORY".*?>||' "$PHPUNIT_FILE"
    perl -pi -e "s|<env name=\"BROWSERTEST_OUTPUT_BASE_URL\".*?>|<env name=\"BROWSERTEST_OUTPUT_BASE_URL\" value=\"http://$GENORING_HOST:$GENORING_PORT\"/>\n    <env name=\"BROWSERTEST_OUTPUT_DIRECTORY\" value=\"/opt/drupal/web/sites/simpletest/browser_output\"/>|" "$PHPUNIT_FILE"
  fi
  printf "\n\$settings['file_chmod_directory'] = 0777;\n" >> web/sites/default/default.settings.php
  # Remove invalid tests.
  rm -rf /opt/drupal/web/modules/contrib/honeypot/tests
  find /opt/drupal/web/modules/contrib/tripal -name tests -prune -exec rm -rf {} \;
  printf "\nTo run tests:\n"
  if [ "$(id -u)" -eq 0 ]; then
    printf "  su genoring\n"
  fi
  printf "  ./vendor/bin/phpunit -c ./web/core ./web/modules/contrib/\n\nex.:\n  ./vendor/bin/phpunit -c ./web/core ./web/modules/contrib/  --group 'genoring'  --filter DataLocatorDefaultUnitTest\n\n"
}

# Manage GenoRing commands.
#######################################

install_module()
{
  if [ -z "$1" ]; then
    log_error "ERROR: install_module(): Missing module name!"
    exit 1
  fi
  composer require --no-interaction "drupal/$1"
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to install module '$1'!"
    exit 1
  fi
  drush pm:enable -y $1
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to enable module '$1'!"
    exit 1
  fi
}

uninstall_module()
{
  if [ -z "$1" ]; then
    log_error "ERROR: uninstall_module(): Missing module name!"
    exit 1
  fi
  drush pm:uninstall -y $1
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to uninstall module '$1'!"
    exit 1
  fi
  composer remove --no-interaction "drupal/$1"
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove module '$1'!"
    exit 1
  fi
}

add_menuitem()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_menuitem(): Missing YAML file!"
    exit 1
  fi

  # Add menu item if not exist.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_menuitem $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add menu item using YAML file '$1'!"
    exit 1
  fi
}

remove_menuitem()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_menuitem(): Missing YAML file!"
    exit 1
  fi

  # Remove menu items.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_menuitem $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove menu item using YAML file '$1'!"
    exit 1
  fi
}

add_page()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_page(): Missing YAML file!"
    exit 1
  fi

  # Add page.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_page $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add page using YAML file '$1'!"
    exit 1
  fi
}

remove_page()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_page(): Missing YAML file!"
    exit 1
  fi

  # Remove menu items.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_page $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove page using YAML file '$1'!"
    exit 1
  fi
}

add_integration()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_integration(): Missing YAML file!"
    exit 1
  fi

  # Add integration.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_integration $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add integration using YAML file '$1'!"
    exit 1
  fi
}

remove_integration()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_integration(): Missing YAML file!"
    exit 1
  fi

  # Remove integration.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_integration $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove integration using YAML file '$1'!"
    exit 1
  fi
}

add_user()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_user(): Missing YAML file!"
    exit 1
  fi

  # Add user.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_user $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add user using YAML file '$1'!"
    exit 1
  fi
}

remove_user()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_user(): Missing YAML file!"
    exit 1
  fi

  # Remove user.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_user $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove user using YAML file '$1'!"
    exit 1
  fi
}

add_group()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_group(): Missing YAML file!"
    exit 1
  fi

  # Add group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_group $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add group using YAML file '$1'!"
    exit 1
  fi
}

remove_group()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_group(): Missing YAML file!"
    exit 1
  fi

  # Remove group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_group $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove group using YAML file '$1'!"
    exit 1
  fi
}

add_user_to_group()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_user_to_group(): Missing YAML file!"
    exit 1
  fi

  # Add user to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_user_to_group $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add user to group using YAML file '$1'!"
    exit 1
  fi
}

remove_user_from_group()
{
  if [ -z "$1" ]; then
    log_error "ERROR: remove_user_from_group(): Missing YAML file!"
    exit 1
  fi

  # Add user to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_user_from_group $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to remove user from group using YAML file '$1'!"
    exit 1
  fi
}

add_permission()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_permission(): Missing YAML file!"
    exit 1
  fi

  # Add permission to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi add_permission $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add permission using YAML file '$1'!"
    exit 1
  fi
}

remove_permission()
{
  if [ -z "$1" ]; then
    log_error "ERROR: add_permission(): Missing YAML file!"
    exit 1
  fi

  # Add permission to group.
  drush php:script --script-path=/opt/genoring/lib genoringapi remove_permission $1

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to add permission using YAML file '$1'!"
    exit 1
  fi
}

backup()
{
  backup_name="${1:-$(date +"drupal_backup_%Y%m%d_%H%M%S")}"
  mkdir -p /backups/$backup_name/genoring/
  drush -y archive:dump --destination=/backups/$backup_name/genoring/ --overwrite --exclude-code-paths=web/sites/default/db_settings.php
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to perform site backup!"
    exit 1
  fi
}

restore()
{
  if [ -z "$1" ]; then
    log_error "ERROR: restore(): Missing backup name!"
    exit 1
  fi

  # First we extract backuped source code of Drupal in a different directory to
  # avoid removing libraries used by Drush for this opeation.
  drush -y archive:restore --code --overwrite --destination-path /tmp/drupal_res /backups/$1/genoring/archive.tar.gz
  # Then we copy restored files to current Drupal and remove restore temp dir.
  cp -R /tmp/drupal_res/* /opt/drupal
  rm -rf /tmp/drupal_res
  # We update the composer libraries.
  composer update
  # Now we restore the rest (database and files).
  drush -y archive:restore  --db --files --overwrite /backups/$1/genoring/archive.tar.gz

  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to restore site backup!"
    exit 1
  fi
}

offline()
{
  drush -y state:set system.maintenance_mode 1 --input-format=integer
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to set site offline!"
    exit 1
  fi
}

online()
{
  drush -y state:set system.maintenance_mode 0 --input-format=integer
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to set site online!"
    exit 1
  fi
}

command()
{
  if [ -z "$1" ]; then
    log_error "ERROR: command(): Missing command name!"
    exit 1
  fi

  "$@"
  if [ $? -gt 0 ]; then
    log_error "ERROR: Failed to run command '$1'!"
    exit 1
  fi
}

#######################################

# Display script help.
print_help()
{
  printf "GenoRing platform v1.0 (using Drupal CMS)
Syntax:
  ./genoring start

Available commands:
  help:
    Displays this help.
  start:
    Starts GenoRing and the PHP FPM daemon (never returns unless killed).
  install_module <module>:
    Downloads and installs the given Drupal module.
  uninstall_module <module>:
    Uninstalls and removes the given Drupal module.
  add_menuitem <uri> <label> [menu_machine_name]:
    Add the given URI to the Drupal menu 'menu_machine_name' using the label
    'label'. If the URI is already in use, the menu item is not added.
  remove_menuitem <uri>:
    Removes all the menu items with the given URI.
  add_user <user_name> <email> [password]:
    Adds the user with the given 'user_name', 'email' and 'password' to Drupal.
  remove_user <user_name>:
    Removes the user that uses the name 'user_name' from Drupal (reassign
    content to 'anonymous').
  add_group <group_name>:
    Adds the role 'group_name' to Drupal.
  remove_group <group_name>:
    Removes the role 'group_name' from Drupal.
  add_user_to_group <user_name> <group_name>:
    Gives the given role to the given user.
  remove_user_from_group <user_name> <group_name>:
    Removes the given role from the given user.
  add_permission <permission_name> <group_name>:
    Grants the given permission to the given group.
  remove_permission <permission_name> <group_name>:
    Removes the given permission from the given group.
  backup [backup_name]:
    Generates a Drupal site archive using the given name.
    Default name is 'drupal_backup_YYYYMMDD_HHIISS' where YYYY is the year, MM
    the month, DD the day of the month, HH current hour (24H format), II current
    minute and SS current second.
  restore <backup_name>:
    Restores a Drupal site archive from the given backup name.
  command <command> [arguments...]:
    Runs a shell command. Using 'genoring command ...' rather than the shell
    command directly allows genoring core replacement to handle and replaces
    some specific commands such as drush commands or composer commands.
  update:
    Performs Drupal CMS and extensions updates. Handles site backup and restore
    in case of update failure.
  offline:
    Sets the site offline and displays a maintenance message.
  online:
    Sets the site back online.
\n"
}

################################################################################
# Main script execution.
################################################################################

# PostgeSQL access setup.
printf "$POSTGRES_HOST:$POSTGRES_PORT:*:$POSTGRES_USER:$POSTGRES_PASSWORD\n" >~/.pgpass && chmod go-rwx ~/.pgpass

# Process commands.
cmd="$1"
shift
printf "COMMAND: $cmd\n" >>"$setup_log"
case "$cmd" in
  start)
    start_genoring "$@"
    ;;
  help|-help|--help|-?|/?)
    print_help "$@"
    ;;
  inittest|inittests)
    inittest "$@"
    ;;
  install_module)
    install_module "$@"
    ;;
  uninstall_module)
    uninstall_module "$@"
    ;;
  add_menuitem)
    add_menuitem "$@"
    ;;
  remove_menuitem)
    remove_menuitem "$@"
    ;;
  add_page)
    add_page "$@"
    ;;
  remove_page)
    remove_page "$@"
    ;;
  add_integration)
    add_integration "$@"
    ;;
  remove_integration)
    remove_integration "$@"
    ;;
  add_user)
    add_user "$@"
    ;;
  remove_user)
    remove_user "$@"
    ;;
  add_group)
    add_group "$@"
    ;;
  remove_group)
    remove_group "$@"
    ;;
  add_user_to_group)
    add_user_to_group "$@"
    ;;
  remove_user_from_group)
    remove_user_from_group "$@"
    ;;
  add_permission)
    add_permission "$@"
    ;;
  remove_permission)
    remove_permission "$@"
    ;;
  backup)
    backup "$@"
    ;;
  restore)
    restore "$@"
    ;;
  update)
    update_cms "$@"
    ;;
  offline)
    offline "$@"
    ;;
  online)
    online "$@"
    ;;
  command)
    command "$@"
    ;;
  *)
    if [ ! -z "$1" ]; then
      log_error "ERROR: Syntax error! Unsupported command '$cmd $@'."
      printf "\n" >&2
      print_help
      exit 1
    else
      print_help
    fi
    ;;
esac
